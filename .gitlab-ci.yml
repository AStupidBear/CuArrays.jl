include:
  - 'https://raw.githubusercontent.com/JuliaGPU/gitlab-ci/master/templates/v6.yml'

image: nvidia/cuda:10.1-cudnn7-devel

variables:
  JULIA_CUDA_VERBOSE: 'true'


# Julia versions

# the "primary" target, where we require thorough tests
# (this requires a recent GPU)
julia:1.3:
  image: juliagpu/cuda:10.1-cudnn7-cutensor1-devel-ubuntu18.04
  extends:
    - .julia:1.3
    - .test
  tags:
    - nvidia
    - sm_75
  variables:
    CI_THOROUGH: 'true'

julia:nightly:
  extends:
    - .julia:nightly
    - .test
  tags:
    - nvidia
  allow_failure: true


# CUDA versions

# NOTE: we support those CUDA versions for which the latest cuDNN is available
#       https://developer.nvidia.com/rdp/cudnn-archive

cuda:10.1:
  image: nvidia/cuda:10.1-cudnn7-devel
  extends:
    - .julia:1.3
    - .test
  tags:
    - nvidia

cuda:10.0:
  image: nvidia/cuda:10.0-cudnn7-devel
  extends:
    - .julia:1.3
    - .test
  tags:
    - nvidia

cuda:9.2:
  image: nvidia/cuda:9.2-cudnn7-devel
  extends:
    - .julia:1.3
    - .test
  tags:
    - nvidia


# hardware platforms

platform:arm64:
  image: nvcr.io/nvidia/l4t-base:r32.2.1
  extends:
    - .julia:1.3
    - .test
  tags:
    - nvidia-arm64


# special tests

pool:none:
  extends:
    - .julia:1.3
    - .test
  tags:
    - nvidia
  variables:
    CUARRAYS_MEMORY_POOL: 'none'

pool:simple:
  extends:
    - .julia:1.3
    - .test
  tags:
    - nvidia
  variables:
    CUARRAYS_MEMORY_POOL: 'simple'

pool:split:
  extends:
    - .julia:1.3
    - .test
  tags:
    - nvidia
  variables:
    CUARRAYS_MEMORY_POOL: 'split'

precompile:
  extends:
    - .julia:1.3
    - .test
  image: ubuntu:bionic
  script:
    - julia --project -e 'using Pkg;
                          Pkg.instantiate();
                          Pkg.build();
                          Pkg.API.precompile()'

debug:
  extends:
    - .julia:1.3
    - .test
  tags:
    - nvidia
  variables:
    JULIA_DEBUG: 'CuArrays'
  script:
    - julia --project -g2 -e 'using Pkg;
                              Pkg.instantiate();
                              Pkg.build();
                              Pkg.test(; coverage=true);'


# reverse tests

# NOTE: reverse testing is tricky because of Manifests. we instantiate both, give priority
#       to this package's Manifest, and manually run tests outside of the test environment.
#       that means we have to manually install Flux' test dependencies though.

flux:
  extends:
    - .julia:1.3
    - .test
  tags:
    - nvidia
  script:
    - export FLUX=".julia/dev/Flux"
    - julia -e 'using Pkg;
                Pkg.develop("Flux");'
    - julia --project -e 'using Pkg;
                          Pkg.instantiate()'
    - julia --project=$FLUX -e 'using Pkg;
                                Pkg.instantiate();
                                Pkg.add(["Documenter"])'
    - JULIA_LOAD_PATH=".:$FLUX::" julia $FLUX/test/runtests.jl
  allow_failure: true


# other tasks

coverage:
  extends:
    - .julia:1.3
    - .coverage

documentation:
  extends:
    - .julia:1.3
    - .documentation
  tags:
    - nvidia

pages:
  stage: deploy
  script:
    - mv docs/build public
  artifacts:
    paths:
    - public
  only:
    - master
